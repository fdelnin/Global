{"id":null,"title":"The Room Party part1","ccs":"DoorLocked= unlock.DoorUnlocked+checkDoor.'locked.DoorLocked;\nDoorUnlocked= lock.DoorLocked+checkDoor.'unlocked.DoorUnlocked;\n\n*keeps track of how many students are inside and its status\nRoom0=status.'empty.Room0+knock.'checkDoor.(locked.'block.Room0+unlocked.'enter.Room1);\nRoom1=status.'someone.Room1+knock.'checkDoor.(locked.'block.Room1+unlocked.'enter.Room2)+exit.Room0;\nRoom2=status.'party.Room2+knock.'checkDoor.(locked.'block.Room2+unlocked.'enter.Room3)+exit.Room1;\nRoom3=status.'party.Room3+exit.Room2;\n\nStudent0=wakeAStudent.'knock.(enter.'studentWait.StudenteEsci+block.'studentWait.Student0); \nStudenteEsci=wakeAStudent.'exit.'studentWait.Student0;\n\nStudent1=wakeAStudent.'knock.(enter.'studentWait.StudenteEsci1+block.'studentWait.Student1); \nStudenteEsci1=wakeAStudent.'exit.'studentWait.Student1;\n\nStudent2=wakeAStudent.'knock.(enter.'studentWait.StudenteEsci2+block.'studentWait.Student2); \nStudenteEsci2=wakeAStudent.'exit.'studentWait.Student2;\n\n*This altrenates between dean and students\nS1=studentWait.'fineTurnoStudente.('dean.'wakeDean.S2+'student.'wakeAStudent.S1);\nS2=deanWait.'fineTurnoDean.('student.'wakeAStudent.S1+'dean.'wakeDean.S2);\nStart='student.'wakeAStudent.S1+'dean.'wakeDean.S2;\n\nDean=wakeDean.'status.(empty.'lock.'deanWait.DeanSearching+someone.'deanWait.Dean+party.'lock.'deanWait.DeanFineParty);\nDeanFineParty=wakeDean.'status.(someone.'deanWait.DeanFineParty+party.'deanWait.DeanFineParty+empty.'unlock.'deanWait.Dean);\nDeanSearching=wakeDean.'unlock.'deanWait.Dean;\n\nP=(Dean|Room0|DoorUnlocked|Student0|Student1|Start)\\{status,empty,party,someone,unlock,lock,knock,checkDoor,exit,enter,locked,unlocked, block,wakeDean,wakeAStudent,studentWait, deanWait};\n*Spec\nSpec='student.'fineTurnoStudente.Spec+'dean.'fineTurnoDean.Spec;\n\n*test can output bad\nTest=student.TS+dean.TD;\nTS=fineTurnoStudente.Test+dean.bad.0+fineTurnoDean.bad.0;\nTD=fineTurnoDean.Test+student.bad.0+fineTurnoStudente.bad.0;\n*P2 should never output bad\nP2=(Test|P)\\{student,dean,fineTurnoStudente,fineTurnoDean};\n","properties":[{"className":"Bisimulation","status":0,"options":{"type":"weak","time":null,"firstProcess":"P","secondProcess":"Spec","comment":""}},{"className":"HML","status":0,"options":{"process":"Test","definitions":"PB min= <<bad>>T or <<->>PB;","topFormula":"PB;","comment":"E' possibile fare bad -> falso, non dovrebbe mai succedere"}},{"className":"HML","status":1,"options":{"process":"P2","definitions":"PB min= <<bad>>T or <<->>PB;","topFormula":"PB;","comment":"P2 non esegue mai bad, questa propriet√† deve essere falsa"}},{"className":"HML","status":0,"options":{"process":"P","definitions":"NoDeadLock max= <->T and [-] NoDeadLock;","topFormula":"NoDeadLock;","comment":""}}],"inputMode":"CCS"}